//
//  DetailToDoViewController.swift
//  CleanToDo
//
//  Created by 재영 on 2022/02/09.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailToDoDisplayLogic: AnyObject {
  func displayToDo(viewModel: DetailToDo.GetToDo.ViewModel)
  func deleteToDo(viewModel: DetailToDo.DeleteToDo.ViewModel)
  func updateToDo(viewModel: DetailToDo.UpdateToDo.ViewModel)
}

class DetailToDoViewController: UIViewController {
  lazy var deleteButton: UIButton = {
    let button = UIButton()
    button.addTarget(self, action: #selector(didTapDeleteButton), for: .touchUpInside)
    button.setImage(UIImage(systemName: "trash.fill"), for: .normal)
    button.translatesAutoresizingMaskIntoConstraints = false
    return button
  }()
  
  var titleLabel: UILabel = {
    let label = UILabel()
    return label
  }()
  
  var contentLabel: UILabel = {
    let label = UILabel()
    return label
  }()
  
  var startDateLabel: UILabel = {
    let label = UILabel()
    return label
  }()
  
  var dueDateLabel: UILabel = {
    let label = UILabel()
    return label
  }()
  
  var todo: ToDo? {
    didSet {
      displayToDo()
    }
  }
  
  var router: (NSObjectProtocol & DetailToDoRoutingLogic & DetailToDoDataPassing)?
  var interactor: DetailToDoBusinessLogic?
  
  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }
  
  required init(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented.")
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    requestToDo()
  }

  private func setup() {
    let interactor = DetailToDoInteractor()
    let presenter = DetailToDoPresenter()
    let router = DetailToDoRouter()
    let worker = DetailToDoWorker()
    
    let viewController = self
    viewController.interactor = interactor
    viewController.router = router
    
    router.viewController = viewController
    router.dataStore = interactor
    
    interactor.presenter = presenter
    interactor.worker = worker
    
    presenter.viewController = viewController
  }
  
  private func requestToDo() {
    let request = DetailToDo.GetToDo.Request()
    interactor?.getToDo(request: request)
  }
  
  private func deleteToDo() {
    let request = DetailToDo.DeleteToDo.Request()
    interactor?.deleteToDo(request: request)
  }
  
  private func displayToDo() {
    if let todo = todo {
      let dateFormatter = DateFormatter()
      dateFormatter.dateStyle = .medium
      
      startDateLabel.text = dateFormatter.string(from: todo.startDate)
      dueDateLabel.text = dateFormatter.string(from: todo.dueDate)
      contentLabel.text = todo.content
      titleLabel.text = todo.title
    }
  }
}


// MARK: - DetailToDoDisplayLogic

extension DetailToDoViewController: DetailToDoDisplayLogic {
  func displayToDo(viewModel: DetailToDo.GetToDo.ViewModel) {
    todo = viewModel.todo
  }
  
  func deleteToDo(viewModel: DetailToDo.DeleteToDo.ViewModel) {
    if let error = viewModel.error {
      AlertFactory.show(
        title: "Delete Error",
        message: error.description,
        viewController: self
      )
    } else {
      router?.routeToList()
    }
  }
  
  func updateToDo(viewModel: DetailToDo.UpdateToDo.ViewModel) {
    if let error = viewModel.error {
      AlertFactory.show(
        title: "Update Error",
        message: error.description,
        viewController: self
      )
    } else {
      todo = viewModel.todo
    }
  }
}


// MARK: - Selector

extension DetailToDoViewController {
  @objc private func didTapDeleteButton() {
    deleteToDo()
  }
}
