//
//  ListToDosViewController.swift
//  CleanToDo
//
//  Created by 재영 on 2022/02/09.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListToDosDisplayLogic: AnyObject {
  func displayToDos(viewModel: ListToDos.GetToDos.ViewModel)
}

class ListToDosViewController: UIViewController {
  var tableView: UITableView = {
    let tableView = UITableView()
    return tableView
  }()
  
  var todos: [ToDo] = [] {
    didSet {
      tableView.reloadData()
    }
  }
  
  var router: (NSObjectProtocol & ListToDosRoutingLogic & ListToDosDataPassing)?
  var interactor: ListToDosBusinessLogic?
  
  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }
  
  required init(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented.")
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    tableView.delegate = self
    tableView.dataSource = self
    tableView.register(
      ListToDosCell.self,
      forCellReuseIdentifier: ListToDosCell.identifier
    )
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    requestToDos(date: Date())
  }
  
  private func setup() {
    let interactor = ListToDosInteractor()
    let presenter = ListToDosPresenter()
    let router = ListToDosRouter()
    let worker = ListToDosWorker()
    
    let viewController = self
    viewController.interactor = interactor
    viewController.router = router
    
    router.viewController = viewController
    router.dataStore = interactor
    
    interactor.presenter = presenter
    interactor.worker = worker
    
    presenter.viewController = viewController
  }
  
  private func requestToDos(date: Date) {
    let request = ListToDos.GetToDos.Request(date: date)
    interactor?.requestToDos(request: request)
  }
}


// MARK: - ListToDosDisplayLogic

extension ListToDosViewController: ListToDosDisplayLogic {
  func displayToDos(viewModel: ListToDos.GetToDos.ViewModel) {
    if let displayToDos = viewModel.todos {
      todos = displayToDos
    }
  }
}


// MARK: - UITableViewDelegate

extension ListToDosViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    router?.routeToDetail()
  }
}


// MARK: - UITableViewDataSource

extension ListToDosViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return todos.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard let cell = tableView.dequeueReusableCell(
      withIdentifier: ListToDosCell.identifier,
      for: indexPath) as? ListToDosCell else {
      return UITableViewCell()
    }
    cell.update(todo: todos[indexPath.row])
    return cell
  }
}
